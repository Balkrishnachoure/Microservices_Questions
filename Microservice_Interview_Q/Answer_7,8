7.How do you ensure security in a microservices architecture using Spring Boot?
    Follow-up: What role does Spring Security and OAuth 2.0 play in securing microservices?

Ans .Securing a microservices architecture involves multiple layers of security measures to protect communication, data, and the services themselves. In a Spring Boot microservices setup, security can be achieved through the following mechanisms:

1.API Gateway Security: The API Gateway (e.g., Spring Cloud Gateway or Netflix Zuul) can act as the entry point for all client requests. It ensures centralized authentication, authorization, and other security-related tasks like logging, rate limiting, etc.

The API Gateway can enforce security by integrating with OAuth 2.0, JWT (JSON Web Tokens), or SSO (Single Sign-On).
Service-to-Service Communication Security:

2.OAuth 2.0 and JWT: Secure communication between services using OAuth 2.0 with JWT for token-based authentication. Each service can validate the token's authenticity and the roles associated with it.
mTLS (Mutual TLS): Using mTLS, both services authenticate each other, ensuring that the communication is secure and trusted.

3.Role-Based Access Control (RBAC): Implement role-based access control within each microservice using Spring Security. You can define different roles (e.g., admin, user, etc.) and restrict access to certain endpoints based on roles or permissions.

4.Service Isolation: Use firewalls, network policies, and security groups to isolate services in different environments and ensure only the required services can communicate with each other.
