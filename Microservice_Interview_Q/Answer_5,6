5.Explain how you would implement inter-service communication in microservices.
    Follow-up: What are the differences between synchronous (e.g., REST) and asynchronous (e.g., messaging with RabbitMQ, Kafka) communication in microservices?

Ans : There are two common patterns for inter-service communication:  

1. Synchronous Communication: This involves real-time communication where the calling service waits for a response.
           -> REST (Representational State Transfer) over HTTP is widely used for synchronous communication
2.Asynchronous Communication: In this case, the services don't need to wait for a response. The calling service sends a
     message to a message broker, which is processed by another service at its own pace.
           ->Message Brokers like RabbitMQ, Apache Kafka, or Amazon SQS are used for asynchronous communication, where a 
        service produces a message, and another service consumes it.
           ->Event-Driven Architecture: Services emit events when something happens (e.g., an order is placed), and other 
        services listen and react to these events asynchronously

## How to Configure Kakfa in Springboot : Steps : 

Step 1 : 1. Add Dependencies :In your pom.xml (for Maven), add the following dependencies:
-----------------------
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter</artifactId>
</dependency>

<dependency>
    <groupId>org.springframework.kafka</groupId>
    <artifactId>spring-kafka</artifactId>
</dependency>
-------------------------
Step 2 :  Kafka Configuration in application.properties or application.yml
------------------
spring:
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: my-group-id
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
-----------------

Step 3 : 3. Kafka Producer Configuration : You can create a Kafka producer bean in your configuration class:
------------------------
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.context.annotation.Bean;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.support.serializer.JsonSerializer;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.context.annotation.Configuration;
import java.util.HashMap;
import java.util.Map;

@Configuration
public class KafkaProducerConfig {

    @Bean
    public ProducerFactory<String, Object> producerFactory() {
        Map<String, Object> configProps = new HashMap<>();
        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        return new DefaultKafkaProducerFactory<>(configProps);
    }

    @Bean
    public KafkaTemplate<String, Object> kafkaTemplate() {
        return new KafkaTemplate<>(producerFactory());
    }
}

----------------------

Step 4 : 4. Kafka Consumer Configuration :Similarly, you can create a Kafka consumer bean in your configuration class:
-----------------------
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.context.annotation.Bean;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.support.serializer.ErrorHandlingDeserializer;
import org.springframework.kafka.support.serializer.JsonDeserializer;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.context.annotation.Configuration;
import java.util.HashMap;
import java.util.Map;

@EnableKafka
@Configuration
public class KafkaConsumerConfig {

    @Bean
    public ConsumerFactory<String, Object> consumerFactory() {
        Map<String, Object> configProps = new HashMap<>();
        configProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        configProps.put(ConsumerConfig.GROUP_ID_CONFIG, "my-group-id");
        configProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, ErrorHandlingDeserializer.class);
        configProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);
        return new DefaultKafkaConsumerFactory<>(configProps, new StringDeserializer(), new JsonDeserializer<>(Object.class));
    }

    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, Object> kafkaListenerContainerFactory() {
        ConcurrentKafkaListenerContainerFactory<String, Object> factory = new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(consumerFactory());
        return factory;
    }
}

----------------------

Step 5 : Creating Kafka Producer and Consumer Services
  -> Producer Service Example:
--------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

@Service
public class KafkaProducerService {

    private static final String TOPIC = "my-topic";

    @Autowired
    private KafkaTemplate<String, Object> kafkaTemplate;

    public void sendMessage(String key, Object message) {
        kafkaTemplate.send(TOPIC, key, message);
    }
}

--------
-> Consumer Listener Example:
     You can use @KafkaListener to listen to Kafka messages in a consumer service.
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;
---------
@Service
public class KafkaConsumerService {

    @KafkaListener(topics = "my-topic", groupId = "my-group-id")
    public void consume(Object message) {
        System.out.println("Received message: " + message);
    }
}
------------

Step 6 : Using Kafka Producer and Consumer : 
    You can inject KafkaProducerService into a controller or service and send messages like this:
----------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class MessageController {

    @Autowired
    private KafkaProducerService kafkaProducerService;

    @PostMapping("/publish")
    public String publishMessage(@RequestBody Object message) {
        kafkaProducerService.sendMessage("key", message);
        return "Message sent to Kafka!";
    }
}
----------------------

Step 7  : 7. Running Kafka Locally
If you're running Kafka locally, you will need to start the Kafka broker and Zookeeper (Kafka depends on Zookeeper) before running your Spring Boot application. You can use Docker for this:


================================================================================

6.What are Circuit Breakers in microservices, and how do you implement them using Spring Boot?
    Follow-up: Can you explain the role of Netflix Hystrix or Resilience4j in handling fault tolerance?


Ans : A Circuit Breaker is a design pattern used in microservices to handle failures gracefully. In distributed systems, service-to-service communication may fail due to network issues, service downtimes, or heavy loads. The Circuit Breaker pattern prevents a system from making requests to an already failing service by short-circuiting the calls after a threshold of failures is reached.

Note : This pattern prevents continuous failure cascades, protecting other services and avoiding performance degradation in the entire system.

## How It Works:
Closed State: The circuit is closed, and all requests are sent to the service. If a certain number of consecutive failures occur, the circuit transitions to the Open state.

Open State: In this state, no requests are sent to the failing service. Instead, an exception is returned immediately or a fallback mechanism is triggered.

Half-Open State: After a specified amount of time, the circuit allows a few requests to pass through to check if the service has recovered. If successful, the circuit closes. If it fails again, it remains open.

## Implementing Circuit Breaker in Spring Boot :There are two popular libraries used for Circuit Breaker patterns in Spring Boot:

1.Netflix Hystrix .
2.Resilience4j .


1. Resilience4j (Recommended)
Resilience4j is a lightweight, easy-to-use fault-tolerance library inspired by Netflix Hystrix but designed for Java 8 and functional programming.

## Steps to Implement Resilience4j Circuit Breaker:

Step 1: Add Dependencies:
-----------------
<dependency>
    <groupId>io.github.resilience4j</groupId>
    <artifactId>resilience4j-spring-boot2</artifactId>
    <version>1.7.1</version>
</dependency>
<dependency>
    <groupId>io.github.resilience4j</groupId>
    <artifactId>resilience4j-circuitbreaker</artifactId>
    <version>1.7.1</version>
</dependency>

----------------
Step 2 : Configure Circuit Breaker in application.properties or application.yml:

-----------------
resilience4j.circuitbreaker:
  instances:
    myService:
      registerHealthIndicator: true
      slidingWindowSize: 10
      minimumNumberOfCalls: 5
      failureRateThreshold: 50
      waitDurationInOpenState: 10s
      permittedNumberOfCallsInHalfOpenState: 3
----------------
Step 3 : Using the Circuit Breaker in Service Calls:

--------------------
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class MyService {

    @CircuitBreaker(name = "myService", fallbackMethod = "fallbackResponse")
    public String callExternalService() {
        RestTemplate restTemplate = new RestTemplate();
        return restTemplate.getForObject("http://external-service/api", String.class);
    }

    public String fallbackResponse(Throwable throwable) {
        return "Fallback response due to error: " + throwable.getMessage();
    }
}

-------------------


