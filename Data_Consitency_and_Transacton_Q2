 Q.How do you ensure data consistency across multiple microservices? What strategies or patterns do you use for 
   handling distributed transactions?
Solution : 
1. Saga Pattern : This Desing Pattern manage distributd trancations by breaking them into sequence of   local or small Transactions .Each service involved in Transaction
                  publishes events to trigger subsequent actions(Later) and , if any step fails  compensating transactions are executed .

2.Event Sourcing : In this pattern every change in application state will be captured as Sequence of event . Microservice subscribe to relevant event and
                   update the data accordingly . However it require careful design and management of Event Stream .

3.Two-Phase Commit (2PC) : It is the Traditional approach . In this one cordinator monitor all the transaction of all 
                           microservices. There are two phaese : prepare and Commit.All the microservices must agree 
                           to commit the tranaction before changes are made in Data base ,ensuring atomicity .

4.CQRS (Command Query Responsibility Segregation): It  is an approach is which we seperate the code that handles writing
        (means changing data) from the code that handle reading .This makes the code easier to understand and scalable .
        Eg: Let suppose you are in restaurant , and customer contantly palcing the orders(Commands) and asking about 
            the status(queries) . Here CQRS suggest to split the task bet two persons .One focus on taking the orders
             (Commands) and other answering the order status(Queries) .

5.Consistent Hashing: 

6.Compensating Transactions:

7.Distributed Locking:

